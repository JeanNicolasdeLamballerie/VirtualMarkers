import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { fetchBookmarks } from './databaseAPI';
import {Bookmark, payloadCreate, BookmarkUniqueSearch, BookmarkOptionsSearch} from './typesDatabase';
import {getBookmarkAsync} from "../bookmark/bookmarkSlice"
const initialState =
  {
    busy:false
  };
const create = (state:Array<Bookmark>, action:PayloadAction<payloadCreate>) => {

  const actionChecker = (action:PayloadAction<payloadCreate>) => false;
  if(actionChecker(action)){
//TODO : some action to inform of error
  } else {
    state.push.apply(state, action.payload)

  }
}
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.


export const databaseSlice = createSlice({
  name: 'database',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setBusy: (state:{busy:boolean}) => {
      try{

        if(state.busy){
          throw "ALREADY_BUSY"
        }
        state.busy = true;
      }
      catch(err){
        //TODO : some action to inform of error
      }
      //Using apply to be able to just push [Bookmark,Bookmark,Bookmark] into state;
    },
    clearBusy: (state:{busy:boolean}) => {
      try{

        if(!state.busy){
          throw "ALREADY_CLEARED"
        }
        state.busy = false;
      }
      catch(err){
        //TODO : some action to inform of error
      }
    },
    },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getBookmarkAsync.pending, (state) => {
        state.busy = true;
      })
      .addCase(getBookmarkAsync.fulfilled, (state) => {
        state.busy = false;
      });
  },
});

export const { clearBusy, setBusy} = databaseSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: any) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default databaseSlice.reducer;
