import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { fetchBookmarks } from './bookmarkAPI';
import {Bookmark, payloadCreate, BookmarkUniqueSearch, BookmarkOptionsSearch} from './typesBookmark';
const initialState:Bookmark[] = [
  {
    url:'',
    name : '',
    createdAt:0,
    updatedAt:0,
    type:null
  }
];
const create = (state:Array<Bookmark>, action:PayloadAction<payloadCreate>) => {

  const actionChecker = (action:PayloadAction<payloadCreate>) => false;
  if(actionChecker(action)){
//TODO : some action to inform of error
  } else {
    state.push.apply(state, action.payload)

  }
}
  const searchUnique = (state:Array<Bookmark>, action:PayloadAction<BookmarkUniqueSearch>) => {
    console.log('hello')
  }
  // Use the PayloadAction type to declare the contents of `action.payload`
  const searchOptions = (state:Array<Bookmark>, action:PayloadAction<BookmarkOptionsSearch>) => {
    console.log('hello')
    
  }

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getBookmarkAsync = createAsyncThunk(
  'bookmarks/fetchBookmarkAsync',
  async (amount:number) => {
    const response:any = await fetchBookmarks(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const bookmarkSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    create: (state:Array<Bookmark>, action:PayloadAction<payloadCreate>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes

      const actionChecker = (action:PayloadAction<payloadCreate>) => false;
      if(actionChecker(action)){
  //TODO : some action to inform of error
      } else {
        state.push.apply(state, action.payload)

      }

      //Using apply to be able to just push [Bookmark,Bookmark,Bookmark] into state;
    },
    searchUnique: (state:Array<Bookmark>, action:PayloadAction<BookmarkUniqueSearch>) => {
      console.log('hello')
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    searchOptions: (state:Array<Bookmark>, action:PayloadAction<BookmarkOptionsSearch>) => {
      console.log('hello')
      
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(getBookmarkAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(getBookmarkAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

// export const { increment, decrement, incrementByAmount } = bookmarkSlice.actions;

// // The function below is called a selector and allows us to select a value from
// // the state. Selectors can also be defined inline where they're used instead of
// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: any) => state.counter.value;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount:number) => (dispatch:any, getState:any) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default bookmarkSlice.reducer;
